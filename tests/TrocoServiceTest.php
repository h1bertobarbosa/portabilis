<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use App\Services\TrocoService;
class TrocoServiceTest extends TestCase
{
    private $trocoService;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $notas = [
            '100R$' => 100,
            '50R$' => 50,
            '10R$' => 10,
            '5R$' => 5,
            '1R$' => 1,
            '50C' => 0.50,
            '10C' => 0.10,
            '5C' => 0.05,
            '1C' => 0.01,
        ];
        
        $this->trocoService = new TrocoService($notas);
    }

    public function testeDeveRetornarUmaNotadeCem()
    {
        $esperado = ['100R$' => 1];

        $atual = $this->trocoService->retornaTroco(100);

        $this->assertEquals($esperado,$atual);
    }

    public function testeDeveRetornarDuasNotadeCem()
    {
        $esperado = ['100R$' => 2];

        $atual = $this->trocoService->retornaTroco(200);

        $this->assertEquals($esperado,$atual);
    }

    public function testeDeveRetornarUmaNotaDeCemEUmaNotaDeCinquenta()
    {
        $esperado = ['100R$' => 1,'50R$' => 1];

        $atual = $this->trocoService->retornaTroco(150);

        $this->assertEquals($esperado,$atual);
    }

    public function testeDeveRetornarMoedasComoTroco()
    {
        $esperado = [
            '10R$' => 2,
            '5R$' => 1,
            '50C' => 1,
            '5C' => 1
        ];

        $atual = $this->trocoService->retornaTroco(25.55);

        $this->assertEquals($esperado,$atual);
    }
}
